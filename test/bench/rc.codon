import sys
import time
from bio import *

def revcomp1(c):
   return ('A' if c == 'T' else \
          ('C' if c == 'G' else \
          ('G' if c == 'C' else \
          ('T' if c == 'A' else c))))

def rc_copy(s):
   rc = str.cat(revcomp1(s[len(s) - i - 1]) for i in range(len(s)))
   # print rc
   return len(rc)

def naive():
   f = FASTA(sys.argv[1], fai=False)
   total = 0
   for l in f:
      total += rc_copy(str(l.seq))
   print total

total = 0
def rc(s):
   s = ~s
   # print s
   global total
   total += len(s)

def idiomatic():
   FASTA(sys.argv[1], fai=False) |> seqs |> rc
   print total

n = 0
def update(kmer):
    global n
    x = type(kmer)() |> base(len(kmer) // 2, k'T')
    if kmer > x:
        n += 1

def test_fast(K: Static[int]):
    global n
    n = 0
    with time.timing(f'{K}-mer (fast)'):
        FASTA(sys.argv[1]) |> seqs |> kmers(step=1, k=K) |> revcomp |> update
    print n


def test_slow(K: Static[int]):
    global n
    n = 0
    with time.timing(f'{K}-mer (slow)'):
        for a in seqs(FASTA(sys.argv[1])):
            for b in kmers(a, step=1, k=K):
                c = revcomp(b)
                update(c)
    print n

def test_super_slow(K: Static[int]):
    global n
    n = 0
    with time.timing(f'{K}-mer (super slow)'):
        for a in seqs(FASTA(sys.argv[1])):
            for b in split(a, K, step=1):
                if not b.N():
                    c = Kmer[K](b)
                    d = revcomp(c)
                    update(d)
    print n

with time.timing("naive"):
   naive()
with time.timing("idiomatic"):
   idiomatic()
with time.timing("pipeline"):
   test_fast(4)
   test_slow(4)
   test_super_slow(4)

   test_fast(8)
   test_slow(8)
   test_super_slow(8)

   test_fast(16)
   test_slow(16)
   test_super_slow(16)

   test_fast(32)
   test_slow(32)
   test_super_slow(32)

   test_fast(64)
   test_slow(64)
   test_super_slow(64)

   test_fast(128)
   test_slow(128)
   test_super_slow(128)
